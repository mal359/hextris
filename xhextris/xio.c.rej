*** xio.c	Tue Apr  6 22:11:23 1993
--- xio.c	Fri Apr 27 10:46:31 1990
***************
*** 55,64 ****
  GC gc, hexgc;
  XFontStruct *font_info, *hexfont_info;
  Pixmap black, white;
- XColor Orange1, Red1, Blue1, Green1, Yellow1, Chocolate1, Purple1, 
-   SteelBlue1, Black, White, Plum1, Maroon1, Pink1, Wheat;
- XColor Orange4, Red4, Blue4, Green4, Yellow4, Chocolate4, Purple4, SteelBlue4,
-   Plum4, Maroon4, Pink4, DarkSlateGrey;
  #ifdef AFS
  extern int PlayerUID;
  #endif
--- 55,60 ----
  GC gc, hexgc;
  XFontStruct *font_info, *hexfont_info;
  Pixmap black, white;
  #ifdef AFS
  extern int PlayerUID;
  #endif
***************
*** 69,75 ****
  int argc;
  char **argv;
  {
!     char buffer[512];
      int width, height, i, bufsize=20, inverse=0, pleasure=0, window_size = 0;
      XSizeHints size_hints;
      XEvent report;
--- 65,71 ----
  int argc;
  char **argv;
  {
!     char buffer[20];
      int width, height, i, bufsize=20, inverse=0, pleasure=0, window_size = 0;
      XSizeHints size_hints;
      XEvent report;
***************
*** 82,88 ****
      struct passwd  *pwent;
  /* The following variables are required by hextris */
      int score = 0, rows = 0, game_over = 1, game_view = 1, oldscore = 0;
- 
      high_score_t high_scores[MAXHIGHSCORES];
      position_t grid[MAXROW][MAXCOLUMN];
      piece_t npiece, piece;
--- 78,83 ----
      struct passwd  *pwent;
  /* The following variables are required by hextris */
      int score = 0, rows = 0, game_over = 1, game_view = 1, oldscore = 0;
      high_score_t high_scores[MAXHIGHSCORES];
      position_t grid[MAXROW][MAXCOLUMN];
      piece_t npiece, piece;
***************
*** 189,195 ****
  		case KeyPress:
  		    XLookupString(&report, buffer, bufsize, &key, &compose);
  		    oldscore = score;
! 		    do_choice(buffer,grid,&npiece,&piece,&score,&rows,
  			      &game_over, &game_view, high_scores);
  		    if ((score != oldscore) || (! score)) {
  			XSync(display,True);
--- 184,190 ----
  		case KeyPress:
  		    XLookupString(&report, buffer, bufsize, &key, &compose);
  		    oldscore = score;
! 		    do_choice(buffer[0],grid,&npiece,&piece,&score,&rows,
  			      &game_over, &game_view, high_scores);
  		    if ((score != oldscore) || (! score)) {
  			XSync(display,True);
***************
*** 218,282 ****
  	    exit(-1);
  	}
      screen = DefaultScreen(display);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "red4", &Red4, &Red4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "green4", &Green4, &Green4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "black", &Black, &Black);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "white", &White, &White);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Orange4", &Orange4, &Orange4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "blue4", &Blue4, &Blue4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "yellow4", &Yellow4, &Yellow4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "chocolate4", &Chocolate4, &Chocolate4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "purple4", &Purple4, &Purple4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "SteelBlue4", &SteelBlue4, &SteelBlue4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Plum4", &Plum4, &Plum4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Maroon4", &Maroon4, &Maroon4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "pink4", &Pink4, &Pink4);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Wheat", &Wheat, &Wheat);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "darkslategrey", &DarkSlateGrey, &DarkSlateGrey);
- 
- 
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "red1", &Red1, &Red1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "green1", &Green1, &Green1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Orange1", &Orange1, &Orange1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "blue1", &Blue1, &Blue1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "yellow1", &Yellow1, &Yellow1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "chocolate1", &Chocolate1, &Chocolate1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "purple1", &Purple1, &Purple1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "SteelBlue1", &SteelBlue1, &SteelBlue1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Plum1", &Plum1, &Plum1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "Maroon1", &Maroon1, &Maroon1);
-     XAllocNamedColor(display, DefaultColormap(display, screen),
- 		     "pink1", &Pink1, &Pink1);
      black = BlackPixel(display, screen);
      white = WhitePixel(display, screen);
! 
      set_font_path(HEXFONTDIR);
! 
  }
  
  /* This sets up the font path to contain the directories that have the
--- 213,227 ----
  	    exit(-1);
  	}
      screen = DefaultScreen(display);
      black = BlackPixel(display, screen);
      white = WhitePixel(display, screen);
!     if (inverse) {
! 	temp = black;
! 	black = white;
! 	white = temp;
!     }
      set_font_path(HEXFONTDIR);
!     set_font_path(FONTDIR);
  }
  
  /* This sets up the font path to contain the directories that have the
***************
*** 314,341 ****
  int argc;
  {
      *width = MAXCOLUMN*40;
!     *height = (MAXROW+4)*20;
!     win = XCreateSimpleWindow(display,RootWindow(display, screen),0,0,
! 			      *width, *height, 4, white, black);
      size_hints->flags = PPosition | PSize | PMinSize;
!     size_hints->x = 0;
!     size_hints->y = 0;
      size_hints->width = *width;
      size_hints->height = *height;
      size_hints->min_width = 300;
      size_hints->min_height = 700;
!     XSetStandardProperties(display, win, WINDOWNAME, ICONNAME, (int) NULL, argv,
  			   argc, size_hints);
      XSelectInput(display, win, ExposureMask | KeyPressMask | ButtonPressMask |
  		 StructureNotifyMask | EnterWindowMask | LeaveWindowMask);
      load_font(&font_info, FONTNAME);
      get_GC(win, &gc, font_info);
-     XSetForeground(display, gc, Wheat.pixel);
-     XSetBackground(display, gc, black);
      load_font(&hexfont_info, HEXFONTNAME);
      get_GC(win, &hexgc, hexfont_info);
-     XSetForeground(display, hexgc, black);
-     XSetBackground(display, hexgc, DarkSlateGrey.pixel);
      XMapWindow(display, win);
      XFlush(display);
  }
--- 259,282 ----
  int argc;
  {
      *width = MAXCOLUMN*40;
!     *height = (MAXROW+4)*26;
!     win = XCreateSimpleWindow(display,RootWindow(display, screen),50,50,
! 			      *width, *height, 4, black, white);
      size_hints->flags = PPosition | PSize | PMinSize;
!     size_hints->x = 50;
!     size_hints->y = 50;
      size_hints->width = *width;
      size_hints->height = *height;
      size_hints->min_width = 300;
      size_hints->min_height = 700;
!     XSetStandardProperties(display, win, WINDOWNAME, ICONNAME, NULL, argv,
  			   argc, size_hints);
      XSelectInput(display, win, ExposureMask | KeyPressMask | ButtonPressMask |
  		 StructureNotifyMask | EnterWindowMask | LeaveWindowMask);
      load_font(&font_info, FONTNAME);
      get_GC(win, &gc, font_info);
      load_font(&hexfont_info, HEXFONTNAME);
      get_GC(win, &hexgc, hexfont_info);
      XMapWindow(display, win);
      XFlush(display);
  }
***************
*** 359,365 ****
  
      *tgc = XCreateGC(display, win, valuemask, &values);
      XSetFont(display, *tgc, tfont_info->fid);
!     XSetForeground(display, *tgc, white);
      XSetLineAttributes(display, *tgc, line_width, line_style, cap_style,
  		   join_style);
      XSetDashes(display, *tgc, dash_offset, dash_list, list_length);
--- 300,306 ----
  
      *tgc = XCreateGC(display, win, valuemask, &values);
      XSetFont(display, *tgc, tfont_info->fid);
!     XSetForeground(display, *tgc, black);
      XSetLineAttributes(display, *tgc, line_width, line_style, cap_style,
  		   join_style);
      XSetDashes(display, *tgc, dash_offset, dash_list, list_length);
***************
*** 411,418 ****
  
      XSetFillStyle(display, gc, FillSolid);
      sprintf(scores,"Score: %6d", *score);
!     y_offset = 160;
!     x_offset = (MAXCOLUMN + 1) * 20;
      XClearArea(display,win,x_offset,y_offset-20,MAXCOLUMN*20, 50, False);
      XDrawString(display, win, gc, x_offset, y_offset, scores,strlen(scores));
      sprintf(scores,"Rows: %3d", *rows);
--- 352,359 ----
  
      XSetFillStyle(display, gc, FillSolid);
      sprintf(scores,"Score: %6d", *score);
!     y_offset = 250;
!     x_offset = (MAXCOLUMN + 5) * 20;
      XClearArea(display,win,x_offset,y_offset-20,MAXCOLUMN*20, 50, False);
      XDrawString(display, win, gc, x_offset, y_offset, scores,strlen(scores));
      sprintf(scores,"Rows: %3d", *rows);
***************
*** 450,457 ****
  
  
      XSetFillStyle(display, gc, FillSolid);
!     y_offset = 200;
!     x_offset = (MAXCOLUMN + 1) * 20;
      for (i = 0; i < 19; i++)
  	XDrawString(display, win, gc, x_offset, y_offset+(i*17), message[i],
  		    strlen(message[i]));
--- 391,398 ----
  
  
      XSetFillStyle(display, gc, FillSolid);
!     y_offset = 315;
!     x_offset = (MAXCOLUMN + 4) * 20;
      for (i = 0; i < 19; i++)
  	XDrawString(display, win, gc, x_offset, y_offset+(i*17), message[i],
  		    strlen(message[i]));
***************
*** 458,480 ****
      XFlush(display);
  }
  
- display_help_score()
- {
-     int y_offset, x_offset, i;
-     static char *message[] = { "Keys:",
- 				 "N,n - new game.",
- 				 "G,g - show game.",
- 				 "Q,q - quit game."};
- 
-     XSetFillStyle(display, gc, FillSolid);
-     y_offset = 200;
-     x_offset = (MAXCOLUMN + 1) * 26;
-     for (i = 0; i < 4; i++)
- 	XDrawString(display, win, gc, x_offset, y_offset+(i*17), message[i],
- 		    strlen(message[i]));
-     XFlush(display);
- }
- 
  /* This is required by hextris!
   *
   * This displays the high score list.
--- 399,404 ----
      XFlush(display);
  }
  
  /* This is required by hextris!
   *
   * This displays the high score list.
***************
*** 494,508 ****
        XDrawString(display, win, gc, x_offset[i], y_offset,
  		  header[i],strlen(header[i]));
      y_offset = 60;
!     for (i = 0; i < ((MAXHIGHSCORES > 40) ? 30 : MAXHIGHSCORES); i++) {
  	itoa(i+1,message);
  	XDrawString(display, win, gc, x_offset[0], y_offset+(i*17),
  		    message,strlen(message));
  	XDrawString(display, win, gc, x_offset[1], y_offset+(i*17),
  		    high_scores[i].name,strlen(high_scores[i].name));
- 	strncpy(message, high_scores[i].userid, 5);
  	XDrawString(display, win, gc, x_offset[2], y_offset+(i*17),
! 		    message, strlen(message));
  	itoa(high_scores[i].score,message);
  	XDrawString(display, win, gc, x_offset[3], y_offset+(i*17),
  		    message,strlen(message));
--- 418,431 ----
        XDrawString(display, win, gc, x_offset[i], y_offset,
  		  header[i],strlen(header[i]));
      y_offset = 60;
!     for (i = 0; i < ((MAXHIGHSCORES > 40) ? 40 : MAXHIGHSCORES); i++) {
  	itoa(i+1,message);
  	XDrawString(display, win, gc, x_offset[0], y_offset+(i*17),
  		    message,strlen(message));
  	XDrawString(display, win, gc, x_offset[1], y_offset+(i*17),
  		    high_scores[i].name,strlen(high_scores[i].name));
  	XDrawString(display, win, gc, x_offset[2], y_offset+(i*17),
! 		    high_scores[i].userid,strlen(high_scores[i].userid));
  	itoa(high_scores[i].score,message);
  	XDrawString(display, win, gc, x_offset[3], y_offset+(i*17),
  		    message,strlen(message));
***************
*** 524,533 ****
  
      tpiece.type = npiece->type;
      tpiece.rotation = npiece->rotation;
!     tpiece.row = 1;
      tpiece.column = MAXCOLUMN+6;
!     XClearArea(display,win,(MAXCOLUMN+3)*18,0,150,140, False);
!     init_piece(&tpiece, 0);
      XFlush(display);
  }
  
--- 447,456 ----
  
      tpiece.type = npiece->type;
      tpiece.rotation = npiece->rotation;
!     tpiece.row = 4;
      tpiece.column = MAXCOLUMN+6;
!     XClearArea(display,win,(MAXCOLUMN+3)*20,0,200,230, False);
!     init_piece(&tpiece);
      XFlush(display);
  }
  
***************
*** 541,665 ****
      int y_offset, x_offset;
      char hex[2];
  
!     x_offset = 20 + column * 16;
!     y_offset = 20 + row * 19 + (column & 1) * 9;
!     if (fill) {
!       strcpy(hex, "|");
!       switch (type) {
!       case 0:
! 	XSetForeground(display, hexgc, Orange1.pixel);
! 	XSetBackground(display, hexgc, Orange4.pixel);
! 	break;
!       case 1:
! 	XSetForeground(display, hexgc, Red1.pixel);
! 	XSetBackground(display, hexgc, Red4.pixel);
! 	break;
!       case 2:
! 	XSetForeground(display, hexgc, Blue1.pixel);
! 	XSetBackground(display, hexgc, Blue4.pixel);
! 	break;
!       case 3:
! 	XSetForeground(display, hexgc, Green1.pixel);
! 	XSetBackground(display, hexgc, Green4.pixel);
! 	break;
!       case 4:
! 	XSetForeground(display, hexgc, Yellow1.pixel);
! 	XSetBackground(display, hexgc, Yellow4.pixel);
! 	break;
!       case 5:
! 	XSetForeground(display, hexgc, Chocolate1.pixel);
! 	XSetBackground(display, hexgc, Chocolate4.pixel);
! 	break;
!       case 6:
! 	XSetForeground(display, hexgc, Purple1.pixel);
! 	XSetBackground(display, hexgc, Purple4.pixel);
! 	break;
!       case 7:
! 	XSetForeground(display, hexgc, SteelBlue1.pixel);
! 	XSetBackground(display, hexgc, SteelBlue4.pixel);
! 	break;
!       case 8:
! 	XSetForeground(display, hexgc, Plum1.pixel);
! 	XSetBackground(display, hexgc, Plum4.pixel);
! 	break;
!       case 9:
! 	XSetForeground(display, hexgc, Maroon1.pixel);
! 	XSetBackground(display, hexgc, Maroon4.pixel);
! 	break;
!       case 10:
! 	XSetForeground(display, hexgc, Pink1.pixel);
! 	XSetBackground(display, hexgc, Pink4.pixel);
! 	break;
!       }	
!     } else {
! 	XSetForeground(display,hexgc,DarkSlateGrey.pixel);
! 	XSetBackground(display, hexgc, DarkSlateGrey.pixel);
! 	strcpy(hex,"}");
!     }
!     XDrawString(display, win, hexgc, x_offset, y_offset, hex, strlen(hex));
!     XFlush(display);
! }
! 
! draw_pos(column,fill,type)
! int column,fill,type;
! {
!     int y_offset, x_offset;
!     char hex[2];
! 
!     x_offset = 20 + column * 16;
!     y_offset = 20 + (MAXROW + 2) * 19 + (column & 1) * 9;
      if (fill) {
!       strcpy(hex, "|");
!       switch (type) {
!       case 0:
! 	XSetForeground(display, hexgc, Orange1.pixel);
! 	XSetBackground(display, hexgc, Orange4.pixel);
! 	break;
!       case 1:
! 	XSetForeground(display, hexgc, Red1.pixel);
! 	XSetBackground(display, hexgc, Red4.pixel);
! 	break;
!       case 2:
! 	XSetForeground(display, hexgc, Blue1.pixel);
! 	XSetBackground(display, hexgc, Blue4.pixel);
! 	break;
!       case 3:
! 	XSetForeground(display, hexgc, Green1.pixel);
! 	XSetBackground(display, hexgc, Green4.pixel);
! 	break;
!       case 4:
! 	XSetForeground(display, hexgc, Yellow1.pixel);
! 	XSetBackground(display, hexgc, Yellow4.pixel);
! 	break;
!       case 5:
! 	XSetForeground(display, hexgc, Chocolate1.pixel);
! 	XSetBackground(display, hexgc, Chocolate4.pixel);
! 	break;
!       case 6:
! 	XSetForeground(display, hexgc, Purple1.pixel);
! 	XSetBackground(display, hexgc, Purple4.pixel);
! 	break;
!       case 7:
! 	XSetForeground(display, hexgc, SteelBlue1.pixel);
! 	XSetBackground(display, hexgc, SteelBlue4.pixel);
! 	break;
!       case 8:
! 	XSetForeground(display, hexgc, Plum1.pixel);
! 	XSetBackground(display, hexgc, Plum4.pixel);
! 	break;
!       case 9:
! 	XSetForeground(display, hexgc, Maroon1.pixel);
! 	XSetBackground(display, hexgc, Maroon4.pixel);
! 	break;
!       case 10:
! 	XSetForeground(display, hexgc, Pink1.pixel);
! 	XSetBackground(display, hexgc, Pink4.pixel);
! 	break;
!       }	
      } else {
! 	XSetForeground(display,hexgc,DarkSlateGrey.pixel);
! 	XSetBackground(display, hexgc, DarkSlateGrey.pixel);
! 	strcpy(hex,"}");
      }
      XDrawString(display, win, hexgc, x_offset, y_offset, hex, strlen(hex));
      XFlush(display);
--- 464,478 ----
      int y_offset, x_offset;
      char hex[2];
  
!     x_offset = 20 + column * 20;
!     y_offset = 20 + row * 26 + (column & 1) * 13;
!     hex[0] = 'b' + type;
!     hex[1] = '\0';
      if (fill) {
! 	XSetForeground(display,hexgc,black);
      } else {
! 	XSetForeground(display,hexgc,white);
! 	strcpy(hex,"a");
      }
      XDrawString(display, win, hexgc, x_offset, y_offset, hex, strlen(hex));
      XFlush(display);
